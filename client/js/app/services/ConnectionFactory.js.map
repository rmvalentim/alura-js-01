{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","dbName","stores","version","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;;AAEjC,QAAMC,SAAS,YAAf;AACA,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM2B;;AAEnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBZ,MAAtB,EAA8BE,OAA9B,CAAlB;;AAEAO,gCAAYI,eAAZ,GAA8B,aAAK;;AAE/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAHD;;AAKAR,gCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,4BAAG,CAACf,UAAJ,EAAgB;AACZA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AACxB,sCAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACL,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBAVD;;AAYAM,gCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,gCAAQC,GAAR,CAAaP,EAAEC,MAAF,CAASO,KAAtB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAJD;AAKH,iBA1BM,CAAP;AA2BH;AAnCL;AAAA;AAAA,0CAqCyBrB,UArCzB,EAqCqC;;AAE7BF,uBAAOwB,OAAP,CAAe,iBAAS;AACpB,wBAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD;;AAE5CzB,mCAAW0B,iBAAX,CAA6BD,KAA7B;AACH;;AAEDzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,iBAPD;AAQH;AA/CL;AAAA;AAAA,8CAiD6B;;AAErB,oBAAG5B,UAAH,EAAe;AACXC;AACAD,iCAAa,IAAb;AACH;AACJ;AAvDL;;AAAA;AAAA;AAyDH,CAlEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\r\n\r\n    const dbName = 'aluraframe';\r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    \r\n    var connection = null;\r\n    var close = null;\r\n    \r\n    return class ConnectionFactory {\r\n    \r\n        constructor() {\r\n            throw new Error('Não é possivel instanciar ConnectionFactory');\r\n        }\r\n    \r\n        static getConnection() {\r\n    \r\n            return new Promise((resolve, reject) => {\r\n    \r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n    \r\n                openRequest.onupgradeneeded = e => {\r\n    \r\n                    ConnectionFactory._createStores(e.target.result);\r\n                };\r\n                \r\n                openRequest.onsuccess = e => {\r\n                    \r\n                    if(!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function() {\r\n                              throw new Error('Você não pode fechar diretamente a conexão');\r\n                        };\r\n                    }\r\n                    resolve(connection);\r\n                };\r\n                \r\n                openRequest.onerror = e => {\r\n                    \r\n                    console.log( e.target.error );\r\n                    reject(e.target.error.name);\r\n                };\r\n            });\r\n        }\r\n        \r\n        static _createStores(connection) {\r\n            \r\n            stores.forEach(store => {\r\n                if(connection.objectStoreNames.contains(store)) {\r\n                    \r\n                    connection.deleteObjectStore(store);\r\n                }\r\n                \r\n                connection.createObjectStore(store, { autoIncrement: true });\r\n            });\r\n        }\r\n\r\n        static closeConnection() {\r\n\r\n            if(connection) {\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n})();\r\n"]}