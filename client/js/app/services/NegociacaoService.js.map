{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","get","then","negociacoes","map","Negociacao","Date","item","data","quantidade","valor","catch","console","log","erro","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","equals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n\r\n    constructor() {\r\n\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n\r\n        return this._http\r\n            .get('negociacoes/semana')\r\n            .then(negociacoes => {\r\n                \r\n                return negociacoes.map(item => new Negociacao( new Date(item.data), item.quantidade, item.valor ))\r\n            })\r\n            .catch(erro => {                    \r\n                console.log(erro);\r\n                throw new Error('Não foi possível importar as negociações da semana.');\r\n            });    \r\n          \r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n        \r\n        return this._http\r\n            .get('negociacoes/anterior')\r\n            .then(negociacoes => {\r\n                \r\n                return negociacoes.map(item => new Negociacao( new Date(item.data), item.quantidade, item.valor ))\r\n            })\r\n            .catch(erro => {                    \r\n                console.log(erro);\r\n                throw new Error('Não foi possível importar as negociações da semana anterior.');\r\n            });   \r\n      \r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n\r\n        return this._http\r\n            .get('negociacoes/retrasada')\r\n            .then(negociacoes => {\r\n                \r\n                return negociacoes.map(item => new Negociacao( new Date(item.data), item.quantidade, item.valor ))\r\n            })\r\n            .catch(erro => {                    \r\n                console.log(erro);\r\n                throw new Error('Não foi possível importar as negociações da semana retrasada.');\r\n            });   \r\n          \r\n    }\r\n\r\n    obterNegociacoes() {\r\n\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), []);\r\n\r\n            return negociacoes;\r\n\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n\r\n    } \r\n\r\n    cadastra(negociacao) {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação adiciona com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível adicionar a negociação');\r\n            });                \r\n               \r\n    }\r\n\r\n    lista() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())                           \r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível listar as negociações');\r\n            });\r\n    }\r\n\r\n    apaga() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível apagar as negociações');\r\n            });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n        \r\n        return this.obterNegociacoes()\r\n            .then(negociacoes => \r\n                negociacoes.filter((negociacao) => \r\n                    !listaAtual.some(negociacaoExistente =>\r\n                        negociacao.equals(negociacaoExistente))))\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível importar as negociações');\r\n            })\r\n           \r\n    }\r\n\r\n}"]}